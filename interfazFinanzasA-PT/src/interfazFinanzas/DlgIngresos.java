/*
 * DlgIngresos.java
 * Creada el 2 de diciembre del 2021 21:11 PM
 */
package interfazFinanzas;

import java.applet.Applet;
import java.applet.AudioClip;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.net.URL;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import objetoNegocio.Ingresos;
import objetosServicio.Fecha;
import validores.Validadores;

/**
 * Cuadro de dialog que permite el agregar y actualizar un ingreso de los
 * registros.
 *
 * @author Pacheco, Orozco y Cervantes
 */
public class DlgIngresos extends javax.swing.JDialog {

    Click so = new Click("/recursos/click1.wav");
    ImageIcon a = new ImageIcon(getClass().getResource("/recursos/aceptar-el-contorno-del-boton-circular.png"));
    ImageIcon b = new ImageIcon(getClass().getResource("/recursos/rehacer-simbolo-de-flecha.png"));
    ImageIcon c = new ImageIcon(getClass().getResource("/recursos/error.png"));
    ImageIcon d = new ImageIcon(getClass().getResource("/recursos/save.png"));
    ImageIcon e = new ImageIcon(getClass().getResource("/recursos/eliminar.png"));
    ImageIcon[] ar = {a, b, c, d, e};

    /**
     * Creates new form DlgIngresos
     *
     * @param parent Parent
     * @param tittle Titulo del cuadro
     * @param modal Modal
     * @param respuesta respuesta
     * @param i Ingreso a agregar o actualizar
     * @param operacion Operacion a realizar
     */
    public DlgIngresos(java.awt.Frame parent, String tittle, boolean modal, StringBuffer respuesta, int operacion, Ingresos i) {
        super(parent, tittle, modal);
        this.respuesta = respuesta;
        this.operacion = operacion;
        this.ingresos = i;
        initComponents();
        if (operacion == ConstantesGUI.AGREGAR) {
            botonAceptar.setText("Guardar");
            botonAceptar.setIcon(ar[3]);
            botonRestaurar.setIcon(ar[1]);
            botonCancelar.setIcon(ar[2]);
        } else if (operacion == ConstantesGUI.ACTUALIZAR) {
            botonAceptar.setIcon(ar[0]);
            botonRestaurar.setIcon(ar[1]);
            botonCancelar.setIcon(ar[2]);
            botonAceptar.setText("Actualizar");
        } else if (operacion == ConstantesGUI.ELIMINAR) {
            botonAceptar.setText("Eliminar");
            botonRestaurar.setEnabled(false);
            botonAceptar.setIcon(ar[4]);
            botonRestaurar.setIcon(ar[1]);
            botonCancelar.setIcon(ar[2]);
        } else if (operacion == ConstantesGUI.DESPLEGAR) {
            botonAceptar.setText("Continuar");
            botonRestaurar.setEnabled(false);
            botonCancelar.setEnabled(false);
            botonAceptar.setIcon(ar[0]);
            botonRestaurar.setIcon(ar[1]);
            botonCancelar.setIcon(ar[2]);
        }
        if ((operacion == ConstantesGUI.ELIMINAR)
                || (operacion == ConstantesGUI.ACTUALIZAR)
                || (operacion == ConstantesGUI.DESPLEGAR)) {
            campoTextoCantidad1.setText(String.valueOf(ingresos.getCantidad()));
            campoTextoFecha.setText(ingresos.getFecha().toString());
            campoTextoComentario.setText(ingresos.getComentario());
        }
        if ((operacion == ConstantesGUI.ELIMINAR)
                || (operacion == ConstantesGUI.DESPLEGAR)) {
            campoTextoCantidad1.setEditable(false);
            campoTextoFecha.setEditable(false);
            campoTextoComentario.setEditable(false);
        }
        respuesta.append(ConstantesGUI.CANCELAR);
        centraCuadroDialogo(parent);
        setSize(555, 435);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * Metodo que centra el cuadro de dialogo
     *
     * @param parent Parent
     */
    private void centraCuadroDialogo(java.awt.Frame parent) {
        Dimension frameSize = parent.getSize();
        Point loc = parent.getLocation();

        Dimension dlgSize = getPreferredSize();

        setLocation((frameSize.width - dlgSize.width) / 2 + loc.x, (frameSize.height - dlgSize.height) / 2 + loc.y);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        campoTextoFecha = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        campoTextoComentario = new javax.swing.JTextField();
        campoTextoCantidad1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        botonAceptar = new javax.swing.JButton();
        botonRestaurar = new javax.swing.JButton();
        botonCancelar = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 153, 102));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 102)));
        jPanel1.setForeground(new java.awt.Color(255, 153, 0));
        jPanel1.setOpaque(false);
        jPanel1.setLayout(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 102, 102));
        getContentPane().setLayout(null);

        jPanel4.setBackground(new java.awt.Color(67, 67, 166));
        jPanel4.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(53, 113, 173));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(null);

        campoTextoFecha.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        campoTextoFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoTextoFechaActionPerformed(evt);
            }
        });
        jPanel2.add(campoTextoFecha);
        campoTextoFecha.setBounds(140, 120, 170, 30);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setText("Fecha");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(20, 120, 53, 24);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setText("Comentario");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(20, 220, 102, 24);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Cantidad");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(20, 40, 77, 24);

        campoTextoComentario.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        campoTextoComentario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoTextoComentarioActionPerformed(evt);
            }
        });
        jPanel2.add(campoTextoComentario);
        campoTextoComentario.setBounds(140, 220, 340, 30);

        campoTextoCantidad1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        campoTextoCantidad1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoTextoCantidad1ActionPerformed(evt);
            }
        });
        jPanel2.add(campoTextoCantidad1);
        campoTextoCantidad1.setBounds(140, 40, 170, 30);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("_____________________________________________");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(0, 70, 500, 30);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("_____________________________________________");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(0, 180, 500, 30);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setText("Formato: DD/MM/AAAA");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(140, 160, 200, 24);

        jPanel4.add(jPanel2);
        jPanel2.setBounds(20, 20, 500, 290);

        botonAceptar.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        botonAceptar.setText("Aceptar");
        botonAceptar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAceptarActionPerformed(evt);
            }
        });
        jPanel4.add(botonAceptar);
        botonAceptar.setBounds(30, 330, 130, 40);

        botonRestaurar.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        botonRestaurar.setText("Restaurar");
        botonRestaurar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botonRestaurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRestaurarActionPerformed(evt);
            }
        });
        jPanel4.add(botonRestaurar);
        botonRestaurar.setBounds(190, 330, 140, 40);

        botonCancelar.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        botonCancelar.setText("Cancelar");
        botonCancelar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });
        jPanel4.add(botonCancelar);
        botonCancelar.setBounds(380, 330, 120, 40);

        getContentPane().add(jPanel4);
        jPanel4.setBounds(0, 0, 540, 400);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Evento del boton aceptar que guarda el ingreso..
     *
     * @param evt Evento
     */
    private void botonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAceptarActionPerformed
        so.run();
        Thread hilo = Thread.currentThread();
        try {
            hilo.sleep(100);
        } catch (InterruptedException e) {
        }
        String msjError = "";
        String comentario = "";
        String fecha = "";
        String cantidad = "";
        int posError = 0;
        if (operacion == ConstantesGUI.AGREGAR || operacion == ConstantesGUI.ACTUALIZAR) {

            comentario = campoTextoComentario.getText();
            fecha = campoTextoFecha.getText();
            cantidad = campoTextoCantidad1.getText();
            if (validadores.cadenaVacia(comentario) || !validadores.validaCadena(20, comentario)) {
                msjError = validadores.cadenaVacia(comentario) ? "Comentario Vacio" : "Comentario muy largo";
                posError = 1;
            }
            if (validadores.cadenaVacia(fecha) || !validadores.validaFecha(fecha)) {
                msjError = validadores.cadenaVacia(fecha) ? "Faltó la fecha" : "La fecha no coincide con el formato";
                posError = 2;
            } else if (!validadores.cadenaVacia(fecha) && validadores.validaFecha(fecha)) {
                if (!validarDias(fecha)) {
                    msjError = "La fecha tiene campos invalidados(Dias o Meses que no existen)";
                    posError = 3;
                }
            }

            if (validadores.cadenaVacia(cantidad)) {
                msjError = "cantidad Vacia";
                posError = 4;
            } else {
                if (cantidad.contains(".")) {
                    String r = cantidad.replaceAll("\\.", "");
                    if (!validadores.validaEntero(r)) {
                        msjError = "La cantidad tiene caracteres invalidos";
                        posError = 5;
                    } else {
                        if (!validadores.validarDouble(cantidad)) {
                            msjError = "La cantidad tiene caracteres invalidos";
                            posError = 6;
                        }
                    }
                } else {
                    if (!validadores.validaEntero(cantidad)) {
                        msjError = "La cantidad tiene caracteres invalidos";
                        posError = 7;
                    }
                }
            }

            if (posError > 0) {
                JOptionPane.showMessageDialog(this, msjError,
                        "Error de entrada.",
                        JOptionPane.ERROR_MESSAGE);
                switch (posError) {
                    case 1:
                        campoTextoComentario.requestFocus();
                        break;
                    case 2:
                        campoTextoFecha.requestFocus();
                        break;
                    case 3:
                        campoTextoFecha.requestFocus();
                        break;
                    case 4:
                        campoTextoCantidad1.requestFocus();
                        break;
                    case 5:
                        campoTextoCantidad1.requestFocus();
                        break;
                    case 6:
                        campoTextoCantidad1.requestFocus();
                        break;
                    case 7:
                        campoTextoCantidad1.requestFocus();
                        break;
                }

            } else if (posError == 0) {
                String s = campoTextoFecha.getText().replaceAll("", "");
                ingresos.setCantidad(Double.valueOf(campoTextoCantidad1.getText()));
                ingresos.setComentario(campoTextoComentario.getText());
                ingresos.setFecha(new Fecha(s));
                ingresos.setTipoMovimiento("Ingresos");
                respuesta.delete(0, respuesta.length());
                respuesta.append(ConstantesGUI.ACEPTAR);
                dispose();
            }
        }

    }//GEN-LAST:event_botonAceptarActionPerformed
    /**
     * Evento del boton restuar que restaura los campos.
     *
     * @param evt Evento
     */
    private void botonRestaurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRestaurarActionPerformed
        so.run();
        Thread hilo = Thread.currentThread();
        try {
            hilo.sleep(100);
        } catch (InterruptedException e) {
        }
        if (operacion == ConstantesGUI.AGREGAR) {
            campoTextoCantidad1.setText("");
            campoTextoComentario.setText("");
            campoTextoFecha.setText("");
        }
        if (operacion == ConstantesGUI.ACTUALIZAR) {
            campoTextoCantidad1.setText(String.valueOf(ingresos.getCantidad()));
            campoTextoComentario.setText(ingresos.getComentario());
            campoTextoFecha.setText(ingresos.getFecha().toString());
        }
    }//GEN-LAST:event_botonRestaurarActionPerformed
    /**
     * Evento del boton cancelar que destruye el cuadro de dialogo.
     *
     * @param evt Evento
     */
    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        so.run();
        Thread hilo = Thread.currentThread();
        try {
            hilo.sleep(100);
        } catch (InterruptedException e) {
        }
        dispose();
    }//GEN-LAST:event_botonCancelarActionPerformed
    /**
     * Evento del campo de texto cantidad.
     *
     * @param evt Evento
     */
    private void campoTextoCantidad1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoTextoCantidad1ActionPerformed
        // TODO add your handling code here:
        String cantidad = campoTextoCantidad1.getText();
        String msjError = "";
        if (validadores.cadenaVacia(cantidad)) {
            msjError = "Faltó la cantidad";
        } else {
            if (cantidad.contains(".")) {
                String r = cantidad.replaceAll("\\.", "");
                if (!validadores.validaEntero(r)) {
                    msjError = "La cantidad tiene caracteres invalidos";
                } else {
                    if (!validadores.validarDouble(cantidad)) {
                        msjError = "La cantidad tiene caracteres invalidos";
                    }
                }
            }
        }

        if (!msjError.equals("")) {
            JOptionPane.showMessageDialog(this, msjError,
                    "Error de entrada.",
                    JOptionPane.ERROR_MESSAGE);
            campoTextoCantidad1.requestFocus();
        } else {
            campoTextoFecha.requestFocus();
        }
    }//GEN-LAST:event_campoTextoCantidad1ActionPerformed
    /**
     * Evento del campo de texto comentario.
     *
     * @param evt Evento
     */
    private void campoTextoComentarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoTextoComentarioActionPerformed
        String comentario = campoTextoComentario.getText();
        String msjError = "";

        if (validadores.cadenaVacia(comentario)) {
            msjError = "Faltó el comentario";
        } else if (!validadores.validaCadena(40, comentario)) {
            msjError = "Comentario muy largo";
        }
        if (!msjError.equals("")) {
            JOptionPane.showMessageDialog(this, msjError,
                    "Error de entrada.",
                    JOptionPane.ERROR_MESSAGE);
            campoTextoComentario.requestFocus();
        } else {
            botonAceptar.requestFocus();
        }
    }//GEN-LAST:event_campoTextoComentarioActionPerformed
    /**
     * Evento del campo de texto fecha.
     *
     * @param evt Evento
     */
    private void campoTextoFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoTextoFechaActionPerformed
        // TODO add your handling code here
        String fecha = campoTextoFecha.getText();
        String msjError = "";

        if (validadores.cadenaVacia(fecha)) {
            msjError = "Faltó la fecha";
        } else if (!validadores.validaFecha(fecha)) {
            msjError = "La fecha no coincide con el formato.";
        } else if (validadores.validaFecha(fecha)) {
            if (!validarDias(fecha)) {
                msjError = "La fecha tiene campos invalidados(Dias o Meses que no existen)";
            }
        }
        if (!msjError.equals("")) {
            JOptionPane.showMessageDialog(this, msjError,
                    "Error de entrada.",
                    JOptionPane.ERROR_MESSAGE);
            campoTextoFecha.requestFocus();
        } else {
            campoTextoComentario.requestFocus();
        }
    }//GEN-LAST:event_campoTextoFechaActionPerformed
    /**
     * Metodo para valdiar los dias dde una fecha y que concuerden con los dias
     * del mes;
     *
     * @param fecha Fecha
     * @return si la fecha o no comple con los dias del mes
     */
    public boolean validarDias(String fecha) {
        int a = 0;
        int auxiliar = 1;
        String diaS = "";
        String mesS = "";
        String anhoS = "";
        int dia = 0;
        int mes = 0;
        int anho = 0;
        char array_caracteres[] = fecha.toCharArray();

        while (a < fecha.length()) {
            if (auxiliar == 1) {
                if (Character.isDigit(array_caracteres[a])) {
                    diaS += array_caracteres[a];
                } else {
                    a++;
                    auxiliar = 2;
                }
            }
            if (auxiliar == 2) {
                if (Character.isDigit(array_caracteres[a])) {
                    mesS += array_caracteres[a];
                } else {
                    a++;
                    auxiliar = 3;
                }
            }
            if (auxiliar == 3) {
                if (Character.isDigit(array_caracteres[a])) {
                    anhoS += array_caracteres[a];
                }
            }
            a++;
        }
        dia = Integer.valueOf(diaS);
        mes = Integer.valueOf(mesS);
        anho = Integer.valueOf(anhoS);
        if (anho % 4 == 0) {
            if (mes < 0 || mes > 12) {
                return false;
            } else {
                switch (mes) {
                    case 1:
                    case 3:
                    case 5:
                    case 7:
                    case 8:
                    case 10:
                    case 12:
                        if (dia < 0 || dia > 31) {
                            return false;
                        }
                        break;
                    case 2:
                        if (dia < 0 || dia > 29) {
                            return false;
                        }
                        break;
                    case 4:
                    case 6:
                    case 9:
                    case 11:
                        if (dia < 0 || dia > 30) {
                            return false;
                        }
                        break;
                    default:
                        break;
                }
            }
        } else {
            if (mes < 0 || mes > 12) {
                return false;
            } else {
                switch (mes) {
                    case 1:
                    case 3:
                    case 5:
                    case 7:
                    case 8:
                    case 10:
                    case 12:
                        if (dia < 0 || dia > 31) {
                            return false;
                        }
                        break;
                    case 2:
                        if (dia < 0 || dia > 28) {
                            return false;
                        }
                        break;
                    case 4:
                    case 6:
                    case 9:
                    case 11:
                        if (dia < 0 || dia > 30) {
                            return false;
                        }
                        break;
                    default:
                        break;
                }
            }
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonAceptar;
    private javax.swing.JButton botonCancelar;
    private javax.swing.JButton botonRestaurar;
    private javax.swing.JTextField campoTextoCantidad1;
    private javax.swing.JTextField campoTextoComentario;
    private javax.swing.JTextField campoTextoFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
    private Ingresos ingresos;
    private Validadores validadores = new Validadores();
    private int operacion;
    private StringBuffer respuesta;
}
